1**description** WTD WTD WTD :
WTD
Query the achievement rate of sales within a certain period of time. The formula for the sales achievement rate is: sales amount / target sales amount - 1, and it is displayed as a percentage with two decimal places.

WTD: this week (from last Sunday to  yesterday).
MTD:this month (from the 1st of this month to yesterday).
QTD: this quarter (from the start of this quarter to yesterday) .
YTD: this year (from the start of this year to yesterday) .
Select the correct target fields required according to the user's questions:
-F1 target:amt_notax_target_f1;
-F2 target:amt_notax_target_f2;
-F3 target:amt_notax_target_f3;
-F4 target:amt_notax_target_f4.
WTD sales vs Target

**question sample**:
-WTD / MTD / QTD / YTD sales vs Target?
-what is the MTD sales achievement for China FP?
-WTD / MTD / QTD / YTD sales vs F1 (target)? Means the target use the f1 target.

**SQL query sample**:
 SELECT
 'WTD' as period,
 SUM(amt_notax) as withouttax_amount,
 SUM(amt_notax_target) as target_amount,
    case when SUM(amt_notax_target) = 0 then 0 else SUM(amt_notax)/SUM(amt_notax_target)-1 END as achievement
 FROM
    dm_fact_sales_chatbi
 WHERE
    date_code Between {1st of this week} AND CURRENT_DATE - INTERVAL '1 day'
 UNION ALL

 SELECT
 'MTD'  as period,
 SUM(amt_notax) as withouttax_amount,
 SUM(amt_notax_target) as target_amount,
    case when SUM(amt_notax_target) = 0 then 0 else SUM(amt_notax)/SUM(amt_notax_target)-1 END as achievement
 FROM
    dm_fact_sales_chatbi
 WHERE
    date_code Between TO_CHAR(DATE_TRUNC('MONTH', CURRENT_DATE), 'YYYY-MM-DD') AND CURRENT_DATE - INTERVAL '1 day'

 UNION ALL

 SELECT
 'QTD' as period,
 SUM(amt_notax) as withouttax_amount,
 SUM(amt_notax_target) as target_amount,
    case when SUM(amt_notax_target) = 0 then 0 else SUM(amt_notax)/SUM(amt_notax_target)-1 END as achievement
 FROM
    dm_fact_sales_chatbi
 WHERE
    date_code Between TO_CHAR(DATE_TRUNC(QUARTER', CURRENT_DATE), 'YYYY-MM-DD') AND CURRENT_DATE - INTERVAL '1 day'

 UNION ALL

 SELECT
 'YTD' as period,
 SUM(amt_notax) as withouttax_amount,
 SUM(amt_notax_target) as target_amount,
    case when SUM(amt_notax_target) = 0 then 0 else SUM(amt_notax)/SUM(amt_notax_target)-1 END as achievement
 FROM
    dm_fact_sales_chatbi
 WHERE
    date_code Between TO_CHAR(DATE_TRUNC('YEAR', CURRENT_DATE), 'YYYY-MM-DD') AND CURRENT_DATE - INTERVAL '1 day'
;
(****)
2**description**:
Query the sales growth in a certain week, including indicators such as sales amount, traffic, CR (Conversion Rate), AOV (Average Order Value), ASP (Average Selling Price), UPT (Units Per Transaction), etc. Of course, it's also possible to query only one of these indicators. The comparison formula is: sales amount of this week / sales amount of last week - 1, and it is displayed as a percentage with two decimal places.

**question sample**:
Weekly comp growth % for sales / traffic / CR / AOV / ASP / UPT.
what is the weekly sales comp in week 34?

**SQL query sample**:
 SELECT
 week_id,
    SUM(amt) as sales_amt,
 SUM(amt_notax) as Sales_notax ,
 SUM(amt_notax)/SUM(lyd_amt_notax)-1 as sales_comp_per ,
    SUM(traffic) as traffic,
 SUM(traffic)/SUM(lyd_traffic)-1 as traffic_comp_per ,
 SUM(case when traffic is not null  THEN trans else 0 END)/SUM(traffic) as CR ,
 SUM(case when traffic is not null  THEN trans else 0 END)/SUM(traffic)/(SUM(case when lyd_traffic is not null  THEN lyd_trans else 0 END)/SUM(lyd_traffic))-1 as cr_comp_per ,
 SUM(amt_notax)/SUM(trans) as AOV ,
 SUM(amt_notax)/SUM(trans)/(SUM(lyd_amt_notax)/SUM(lyd_trans))-1 as aov_comp_per ,
 SUM(amt_notax)/SUM(qty) as ASP,
 SUM(amt_notax)/SUM(qty)/(SUM(lyd_amt_notax)/SUM(lyd_qty))-1 as asp_comp_per ,
 SUM(qty)/SUM(trans) as UPT ,
 SUM(qty)/SUM(trans)/(SUM(lyd_qty)/SUM(lyd_trans))-1 as UPT_comp_per
 FROM
    dm_fact_sales_chatbi
 WHERE
    week_id ='202534'
    AND comp_flag ='Y' -- The store participating in the comp.
 GROUP BY
    week_id
;

(****)
3**description**:
Query the sales growth situation for a specific month, and certain conditions such as countries and channels can be specified. The comparison formula is: sales of this month / sales of last month - 1, and it is displayed as a percentage with two decimal places.

**question sample**:
What is the sales MOM% for APAC EC?

**SQL query sample**:
 SELECT
 month_id,
    SUM(amt) as sales_amt,
 SUM(amt_notax) as Sales_notax ,
 SUM(amt_notax)/SUM(lm_amt_notax)-1 as sales_notax_mom_per
 FROM
    dm_fact_sales_chatbi
 WHERE
    date_code Between TO_CHAR(DATE_TRUNC('MONTH', CURRENT_DATE), 'YYYY-MM-DD') AND TO_CHAR(DATEADD(day, -1, CURRENT_DATE), 'YYYY-MM-DD')
 GROUP BY
    month_id
;

(****)
4**description**:
Query the achievement rate of sales within a certain period of time. The formula for the sales achievement rate is: sales amount / target sales amount - 1, and it is displayed as a percentage with two decimal places.

**question sample**:
What is the % to go to achieve the month revenue?

**SQL query sample**:
 SELECT
 TO_CHAR(CURRENT_DATE, 'YYYY-MM') AS title,
    SUM(amt) as amt,
 SUM(amt_notax) as amt_notax ,
 SUM(amt_notax_target) as amt_notax_target,
 case when SUM(amt_notax_target) = 0 then 0 else SUM(amt_notax)/SUM(amt_notax_target)-1 END as amt_ach
 FROM
    dm_fact_sales_chatbi
 WHERE
    date_code BETWEEN TO_CHAR(DATE_TRUNC('MONTH', CURRENT_DATE), 'YYYY-MM-DD') AND TO_CHAR(DATEADD(day, -1, CURRENT_DATE), 'YYYY-MM-DD')
 GROUP BY
    TO_CHAR(CURRENT_DATE, 'YYYY-MM')
;

(****)
5**description**:
Query the sales growth in a certain week, including indicators such as sales amount, traffic, CR (Conversion Rate), AOV (Average Order Value), ASP (Average Selling Price), UPT (Units Per Transaction), etc. Of course, it's also possible to query only one of these indicators. The comparison formula is: sales amount of this week / sales amount of last week - 1, and it is displayed as a percentage with two decimal places.

**question sample**:
WoW growth% of sales / traffic / CR / AOV / ASP / UPT

**SQL query sample**:
 SELECT
 week_id,
    SUM(amt) as amt,
 SUM(amt_notax) as amt_notax ,
 SUM(amt_notax)/SUM(lw_amt_notax)-1 as sales_notax_wow_per ,
    SUM(traffic) as traffic,
 SUM(traffic)/SUM(lw_traffic)-1 as traffic_wow_per ,
 SUM(case when traffic is not null  THEN trans else 0 END)/SUM(traffic) as CR ,
 SUM(case when traffic is not null  THEN trans else 0 END)/SUM(traffic)/(SUM(case when lw_traffic is not null  THEN lw_trans else 0 END)/SUM(lw_traffic))-1 as cr_wow_per ,
 SUM(amt_notax)/SUM(trans) as AOV ,
 SUM(amt_notax)/SUM(trans)/(SUM(lw_amt_notax)/SUM(lw_trans))-1 as aov_wow_per ,
 SUM(amt_notax)/SUM(qty) as ASP,
 SUM(amt_notax)/SUM(qty)/(SUM(lw_amt_notax)/SUM(lw_qty))-1 as asp_wow_per ,
 SUM(qty)/SUM(trans) as UPT ,
 SUM(qty)/SUM(trans)/(SUM(lw_qty)/SUM(lw_trans))-1 as UPT_wow_per
 FROM
    dm_fact_sales_chatbi
 WHERE
    date_code Between {1st of this week} AND {Today}
 GROUP BY
    week_id
;

(****)
6**description**:
Query the sales growth in a certain month, including indicators such as sales amount, traffic, CR (Conversion Rate), AOV (Average Order Value), ASP (Average Selling Price), UPT (Units Per Transaction), etc. Of course, it's also possible to query only one of these indicators. The comparison formula is: sales amount of this month / sales amount of last month - 1, and it is displayed as a percentage with two decimal places.

**question sample**:
MoM growth% of sales / traffic / CR / AOV / ASP / UPT

**SQL query sample**:
 SELECT
 month_id,
    SUM(amt) as amt,
 SUM(amt_notax) as amt_notax ,
 SUM(amt_notax)/SUM(lm_amt_notax)-1 as amt_notax_mom_per ,
    SUM(traffic) as traffic,
 SUM(traffic)/SUM(lm_traffic)-1 as traffic_mom_per ,
 SUM(case when traffic is not null  THEN trans else 0 END)/SUM(traffic) as CR ,
 SUM(case when traffic is not null  THEN trans else 0 END)/SUM(traffic)/(SUM(case when lm_traffic is not null  THEN lm_trans else 0 END)/SUM(lm_traffic))-1 as cr_mom_per ,
 SUM(amt_notax)/SUM(trans) as AOV ,
 SUM(amt_notax)/SUM(trans)/(SUM(lm_amt_notax)/SUM(lm_trans))-1 as aov_mom_per ,
 SUM(amt_notax)/SUM(qty) as ASP,
 SUM(amt_notax)/SUM(qty)/(SUM(lm_amt_notax)/SUM(lm_qty))-1 as asp_mom_per ,
 SUM(qty)/SUM(trans) as UPT ,
 SUM(qty)/SUM(trans)/(SUM(lm_qty)/SUM(lm_trans))-1 as UPT_mom_per
 FROM
    dm_fact_sales_chatbi
 WHERE
    date_code Between TO_CHAR(DATE_TRUNC('MONTH', CURRENT_DATE), 'YYYY-MM-DD') AND TO_CHAR(DATEADD(day, -1, CURRENT_DATE), 'YYYY-MM-DD')
 GROUP BY
    month_id
;

(****)
7**description**:
Calculate the sales proportion according to the division attribute of the product, and at the same time compare it with the sales proportion of last week. Of course, it's also possible to only query the sales proportion. The sales proportion is displayed as a percentage with two decimal places.

**question sample**:
SOB of APP / FTW / ACCS and how does it compare to last week?

**SQL query sample**:
WITH DivisionSales AS (
 SELECT
 division,
    SUM(amt) as TotalAmount,
    SUM(lw_amt) as LWTotalAmount
 FROM
    dm_fact_sales_sku_chatbi
 WHERE
 date_code  Between {1st of this week} AND {Today}
    AND division in ('Apparel','Footwear','Accessories')
 GROUP BY
    division
 ),
 TotalSales AS (
    SELECT
        SUM(TotalAmount) AS GrandTotal,
  SUM(LWTotalAmount) AS LWGrandTotal
    FROM
        DivisionSales
)
SELECT
    ds.division,
    ds.TotalAmount,
    CAST(ds.TotalAmount / ts.GrandTotal * 100.0 as decimal(7,2))  ||'%' AS PercentageOfTotal,
 ds.LWTotalAmount,
    CAST(ds.LWTotalAmount / ts.LWGrandTotal * 100.0 as decimal(7,2))  ||'%' AS LWPercentageOfTotal
 FROM
    DivisionSales ds,
    TotalSales ts
 ORDER BY
    ds.TotalAmount DESC;

(****)
8**description**:
Calculate the sales proportion according to certain key attributes of the products, and at the same time compare it with the proportions of sales amount and sales quantity of last week. Of course, it's also possible to only query the proportion of sales amount or the proportion of sales quantity. The proportion of sales amount is displayed as a percentage with two decimal places.

**question sample**:
Key category sales SOB / Unit SOB and its performance vs  last week.

**SQL query sample**:
WITH categorySales AS (
 SELECT
 key_stories,
    SUM(amt) as TotalAmount,
    SUM(lw_amt) as LWTotalAmount
 FROM
    dm_fact_sales_sku_chatbi
 WHERE
 date_code  Between {1st of this week} AND {Today}
 GROUP BY
    key_stories
 ),
 TotalSales AS (
    SELECT
        SUM(TotalAmount) AS GrandTotal,
  SUM(LWTotalAmount) AS LWGrandTotal
    FROM
        categorySales
)
SELECT
    ds.key_stories,
    ds.TotalAmount,
    CAST(ds.TotalAmount / ts.GrandTotal * 100.0 as decimal(7,2))  ||'%' AS PercentageOfTotal,
 ds.LWTotalAmount,
    CAST(ds.LWTotalAmount / ts.LWGrandTotal * 100.0 as decimal(7,2))  ||'%' AS LWPercentageOfTotal
 FROM
    categorySales ds,
    TotalSales ts
 ORDER BY
    ds.TotalAmount DESC;

(****)
9**description**:
Query the sales proportion situation of MFO products. The sales proportion is displayed as a percentage with two decimal places.

**question sample**:
What is the MFO% in week 27? How does it compare to last week and last year average?

**SQL query sample**:
WITH MFOSales202527 AS ( SELECT 'MFO' AS title, SUM ( amt ) AS mfo_amt FROM dm_fact_sales_sku_chatbi WHERE
week_id = '202527' AND product_line = 'MFO' ),
TotalSales202527 AS ( SELECT 'Total' AS title, SUM ( amt ) AS total_amt FROM dm_fact_sales_sku_chatbi WHERE
 week_id = '202527' ),
MFOSales202526 AS ( SELECT SUM ( amt ) AS mfo_amt FROM dm_fact_sales_sku_chatbi WHERE
 week_id = '202526' AND product_line = 'MFO' ),
TotalSales202526 AS ( SELECT SUM ( amt ) AS total_amt FROM dm_fact_sales_sku_chatbi WHERE
 week_id = '202526' ),
MFOSalesly AS ( SELECT SUM ( amt ) AS mfo_amt FROM dm_fact_sales_sku_chatbi WHERE
 year_id = '2024' AND product_line = 'MFO' ),
TotalSalesly AS ( SELECT SUM ( amt ) AS total_amt FROM dm_fact_sales_sku_chatbi WHERE
 year_id = '2024' ) SELECT
( SELECT CASE WHEN TotalSales202527.total_amt = 0 THEN 0 ELSE MFOSales202527.mfo_amt / TotalSales202527.total_amt END  FROM MFOSales202527, TotalSales202527 ) AS MFO_amt_per202527,
( SELECT CASE WHEN TotalSales202526.total_amt = 0 THEN 0 ELSE MFOSales202526.mfo_amt / TotalSales202526.total_amt END  FROM MFOSales202526, TotalSales202526 ) AS MFO_amt_per202526,
( SELECT CASE WHEN TotalSalesly.total_amt = 0 THEN 0 ELSE MFOSalesly.mfo_amt / TotalSalesly.total_amt END  FROM MFOSalesly, TotalSalesly ) AS MFO_amt_perlastyear
;

(****)
10**description**:
Query the sales and target on store code or store name  and calculate the achievement rate.
The formula for the sales achievement rate is: sales amount / target sales amount - 1, and it is displayed as a percentage with two decimal places.

**question sample**:
What was yesterday sales on store '1234'? Does it meet sales target?

**SQL query sample**:
 SELECT
 date_code,
 store_code,
 store_name,
    SUM(amt) as sales_amt,
 SUM(amt_notax) as Sales_notax ,
 SUM(amt_notax_target),
 case when SUM(amt_notax_target) = 0 then 0 else SUM(amt_notax)/SUM(amt_notax_target)-1 END as amt_ach
 FROM
    dm_fact_sales_chatbi
 WHERE
    date_code = TO_CHAR(DATEADD(day, -1, CURRENT_DATE), 'YYYY-MM-DD')
    AND (store_code like '%1234%'
     OR store_name like '%1234%' )
 GROUP BY
    date_code,
 store_code,
 store_name
 ;

(****)
11**description**:
Query the store which has the best wow sales growth%.

**question sample**:
Which store has the best wow sales growth%?

**SQL query sample**:
 SELECT
    top 5
 week_id,
 store_code,
 store_name,
    SUM(amt) as sales_amt,
 SUM(amt_notax) as Sales_notax ,
 SUM(lw_amt_notax) as LW_sales_notax ,
 case when SUM(lw_amt_notax) =0 then 0 else  SUM(amt_notax)/SUM(lw_amt_notax)-1 end as sales_notax_wow_per
 FROM
    dm_fact_sales_chatbi
 WHERE
    date_code Between {1st of this week} AND {Today}
 AND lw_amt_notax >0
    AND amt_notax >0
 GROUP BY
    week_id,
 store_code,
 store_name
 ORDER BY
    sales_notax_wow_per DESC
;

(****)
12**description**:
Query the store which  has the worst wow sales growth%.

**question sample**:
Which store has the worst wow sales growth%?

**SQL query sample**:
 SELECT
    top 5
 week_id,
 store_code,
 store_name,
    SUM(amt) as sales_amt,
 SUM(amt_notax) as Sales_notax ,
 SUM(lw_amt_notax) as LW_sales_notax ,
 case when SUM(lw_amt_notax) =0 then 0 else  SUM(amt_notax)/SUM(lw_amt_notax)-1 end as sales_notax_wow_per
 FROM
    dm_fact_sales_chatbi
 WHERE
    date_code Between {1st of this week} AND {Today}
 AND lw_amt_notax >0
    AND amt_notax >0
 GROUP BY
    week_id,
 store_code,
 store_name
 ORDER BY
    sales_notax_wow_per ASC
;

(****)
13**description**:
Query the product categories that contribute significantly to the weekly sales.

**question sample**:
Which category drive China BH revenue in week 27?

**SQL query sample**:
 SELECT
    top 5
 key_stories,
    SUM(amt) as sales_amt
 FROM
    dm_fact_sales_sku_chatbi
 WHERE
    week_id ='202527'
 AND country = 'Mainland'
 AND store_type = 'BH'
 GROUP BY
 key_stories
 ORDER BY
    SUM(amt) DESC
;

(****)
14**description**:
Query the sell-through rate of the product as of today.
Query the sell through of the weekly frequency of commodities.
sell-through: sales units( from last Sunday to today ) /(Inventory quantity of last Saturday + sales units( from last Sunday to today )),Display with two decimal places in percentage..

**question sample**:
What is the sell-through of 'CURRY' as of today?
'CURRY' could be the product's name, division, category, or material.

**SQL query sample**:
With salesQty as (
 SELECT
 product_name,
    SUM(qty) as sales_units
 FROM
    dm_fact_sales_sku_chatbi
 WHERE
    date_code between {1st of this week} AND {today}
 AND (
     product_name like '%CURRY%' OR
  division like '%CURRY%' OR
  key_stories like '%CURRY%' OR
  material like '%CURRY%'
 )
 GROUP BY
 product_name
),
InvOfLastSaturday as (
-- Get the onhand inventory of the most recent Saturday before the transaction starts.
  SELECT
 country,
    SUM(stock) as onhand_inv
 FROM
    dm_fact_onhand_chatbi
 WHERE
    date_code =
(Select
 TO_CHAR(MAX(date_code),'YYYY-MM-DD') -- edw_dim_calendar.date_code:type of date;dm_fact_onhand_chatbi.date_code:type of String(YYYY-MM-DD).
 FROM edw_dim_calendar
 WHERE
 date_code <{today} AND weekday_name ='Saturday')
 AND (
     product_name like '%CURRY%' OR
  division like '%CURRY%' OR
  key_stories like '%CURRY%' OR
  material like '%CURRY%'
 )
 GROUP BY
 product_name
)
 Select
 sales.product_name,
 sales.sales_units,
 stock.onhand_inv,
 CASE WHEN stock.onhand_inv = 0 THEN 0 ELSE CAST(sales.sales_units*100.00/stock.onhand_inv as decimal(18,2)) END || '%' as sell_through
 FROM salesQty sales inner join InvOfLastSaturday stock
 on sales.product_name = stock.product_name
;

(****)
15**description**:
Query the number of stores that have reached their weekly sales targets and calculate the percentage.
Display with two decimal places in percentage.

**question sample**:
How many stores reach weekly sales target? Absolute store count and % of total

**SQL query sample**:
WITH StoreSales AS (
 SELECT
 store_code,
    SUM(amt_notax) as TotalAmountNet,
    SUM(amt_notax_target) as TotalTargetNet
 FROM
    dm_fact_sales_chatbi
 WHERE
 date_code  Between {1st of this week} AND TO_CHAR(DATEADD(day, -1, CURRENT_DATE), 'YYYY-MM-DD')
 GROUP BY
    store_code
 ),
 ReachStore AS (
    SELECT
        count(DISTINCT store_code) as reachcount
    FROM
        StoreSales
 WHERE
     TotalAmountNet>=TotalTargetNet
),
 ALLStore AS (
    SELECT
        count(DISTINCT store_code) as allcount
    FROM
        StoreSales
)
SELECT
    ds.reachcount as reached_store,
    ts.allcount as all_store,
    CAST(ds.reachcount*1.00 / ts.allcount*100.0 as decimal(7,2)) ||'%' AS PercentageOfTotal
 FROM
    ReachStore ds,
    ALLStore ts;

(****)
16**description**:
Query the discount level of this week.
And show the Comparison to last week and last year channel average.

**question sample**:
What is the discount level of this week? How does it compare to last week and last year channel average?

**SQL query sample**:
With twdis as (
    SELECT
 week_id,
 channel,
    SUM(amt)/SUM(orig_price)-1 as tw_discount
 FROM
    dm_fact_sales_chatbi
 WHERE
    date_code Between {1st of this week} AND {Today}
 GROUP BY
    week_id,
 channel
),
    Lwdis as (
 SELECT
 channel,
    SUM(amt)/SUM(orig_price)-1 as lw_discount
 FROM
    dm_fact_sales_chatbi
 WHERE
    date_code Between DATEADD(day,-7,{last Sunday}) AND DATEADD(day,-7,TO_CHAR(DATEADD(day, -1, CURRENT_DATE), 'YYYY-MM-DD'))
 GROUP BY
 channel
),
LMdis as (
    SELECT
 channel,
    SUM(amt)/SUM(orig_price)-1 as lm_discount
 FROM
    dm_fact_sales_chatbi
 WHERE
    date_code Between DATEADD(month,-1,{1st of this week}) AND DATEADD(month,-1,TO_CHAR(DATEADD(day, -1, CURRENT_DATE), 'YYYY-MM-DD'))
 GROUP BY
 channel
),
LYdis as (
SELECT
 channel,
    SUM(amt)/SUM(orig_price)-1 as ly_discount
 FROM
    dm_fact_sales_chatbi
 WHERE
    date_code Between DATEADD(year,-1,{1st of this week}) AND DATEADD(year,-1,TO_CHAR(DATEADD(day, -1, CURRENT_DATE), 'YYYY-MM-DD'))
 GROUP BY
 channel
)

 SELECT
 tw.week_id,
 tw.channel,
    tw.tw_discount ,
 lw.lw_discount ,
 lm.lm_discount ,
    ly.ly_discount
 FROM
    twdis tw left join lwdis lw on tw.channel=lw.channel
    left join lmdis lm on tw.channel=lm.channel
    left join lydis ly on tw.channel=ly.channel
;

(****)
17**description**:
Query the number of opening stores as of a date.

**question sample**:
How many opening stores do we have as of yyyymmdd?

**SQL query sample**:
 SELECT
    store.country,
 count(store.store_code) as storecount
 FROM
    edw_dim_store_prod store inner join edw_dim_calendar calendar
 on store.date_sid = calendar.date_sid
 WHERE
    calendar.date_code = 'yyyy-mm-dd'
    AND store.open_flag ='open'
 GROUP BY
    store.country
 ORDER BY
    count(store.store_code) DESC
;
(****)
18**description**:
Query the number of comp stores as of a date.

**question sample**:
How many comp stores do we have as of yyyymmdd?

**SQL query sample**:
 SELECT
    store.country,
 count(store.store_code) as storecount
 FROM
    edw_dim_store_prod store inner join edw_dim_calendar calendar
 on store.date_sid = calendar.date_sid
 WHERE
    calendar.date_code = 'yyyy-mm-dd'
    AND store.comp_flag ='Y' -- The store participating in the comp.
 GROUP BY
    store.country
 ORDER BY
    count(store.store_code) DESC
;
(****)
19**description**:
Query the average store size .

**question sample**:
What is average China BH store size in FY24? What is average China BH comp store size in FY24?

**SQL query sample**:
 SELECT
    'FY24store' as title,
 AVG(store.area) as storearea
 FROM
    edw_dim_store_prod store inner join edw_dim_calendar calendar
 on store.date_sid = calendar.date_sid
 WHERE
    calendar.date_code between '2023-04-01' AND '2024-03-31'
 AND store.store_type = 'BH'
 UNION ALL
 SELECT
    'FY24compstore' as title,
 AVG(store.area) as storearea
 FROM
    edw_dim_store_prod store inner join edw_dim_calendar calendar
 on store.date_sid = calendar.date_sid
 WHERE
    calendar.date_code between '2023-04-01' AND '2024-03-31'
 AND store.store_type = 'BH'
 AND store.comp_flag = 'Y' -- The store participating in the comp.
;

(****)
20**description**:
Query the number of the new stores.
The store information in edw_dim_store_prod is at a daily granularity, meaning the store information is repeated daily.

**question sample**:
How many new stores do we have in FY24?

**SQL query sample**:
With openstore as (
    SELECT
 store.store_master_code,
 min(store.open_date) as open_date
 FROM
    edw_dim_store_prod store inner join edw_dim_calendar calendar
 on store.date_sid = calendar.date_sid
 WHERE
    calendar.date_code between '2023-04-01' AND '2024-03-31'
 GROUP BY
    store.store_master_code
)
 SELECT
 count(store_master_code)
 FROM
    openstore
 WHERE
    open_date between '2023-04-01' AND '2024-03-31'
;

(****)
21**description**:
Query the sales and target for stores , and calculate the achievement rate.
amt_ach >0 : achieve the target；
amt_ach <0 :did not achieve the target.

**question sample**:
Which stores did not meet sales target last week?

**SQL query sample**:
 SELECT
 store_code,
 store_name,
    SUM(amt) as sales_amt,
 SUM(amt_notax) as Sales_notax ,
 SUM(amt_notax_target) as amt_notax_target,
 case when SUM(amt_notax_target) = 0 then 0 else SUM(amt_notax)/SUM(amt_notax_target)-1 END as amt_ach
 FROM
    dm_fact_sales_chatbi
 WHERE
    date_code between  {last last Sunday} and {last Saturday}
 GROUP BY
 store_code,
 store_name
 HAVING
    amt_ach >0
 ORDER BY
    amt_ach desc
;

(****)
22**description**:
Query the sales and target for stores , and calculate the achievement rate.
Query the sales performance after the store opened .

**question sample**:
Do we have any new store opened last week? When did it open and how did it perform?

**SQL query sample**:
 SELECT
 store_code,
 store_name,
 open_date,
    SUM(amt) as sales_amt_ToNow,
 SUM(amt_notax) as Sales_notax ,
 SUM(amt_notax_target) as amt_notax_target,
 case when SUM(amt_notax_target) = 0 then 0 else SUM(amt_notax)/SUM(amt_notax_target)-1 END as amt_ach
 FROM
    dm_fact_sales_chatbi
 WHERE
    date_code >= {last last Sunday}
    AND open_date between  {last last Sunday} and {last Saturday}
 GROUP BY
 store_code,
 store_name,
 open_date
 ORDER BY
    SUM(amt) desc
;

(****)